/*
   This script will create the tables for a basic oa4mp install. Since MySQL has
   *no* variable support, everything is hard-coded. if you want something other
   than the default names and then edit the file.
*/

/*
Usage: Log in as an administrator (such as root) that can create the user.
Normally this is done by the ansible script, otherwise it is (probably) also
done when granting the permissions later on.

CREATE USER '{{ mp_server_db_user }}'@'localhost' IDENTIFIED BY '{{ mp_server_db_pw }}';

Run the rest of this script.
*/

/* User and database are already created by the ansible script, hence next line
 * is normally non-functional */
CREATE DATABASE IF NOT EXISTS {{ mp_server_db }} DEFAULT CHARACTER SET utf8;

USE {{ mp_server_db }};

/*
Some useful commands:
 Show Databases;
 Show schemas;
 SELECT User FROM mysql.user;
 SHOW GRANTS FOR 'user'@'localhost';
 */

CREATE TABLE clients (
  client_id     VARCHAR(255) PRIMARY KEY,
  public_key    TEXT,
  name          TEXT,
  home_url      TEXT,
  error_url     TEXT,
  email         TEXT,
  proxy_limited BOOLEAN,
  creation_ts   TIMESTAMP,
  rt_lifetime   BIGINT,
  callback_uri  TEXT,
  issuer        TEXT,
  ldap          TEXT,
  scopes        TEXT,
  sign_tokens   TINYINT(1),
  cfg           TEXT,
  public_client TINYINT(1)
);

CREATE TABLE client_approvals (
  client_id   VARCHAR(255) PRIMARY KEY,
  approver    TEXT,
  approved    BOOLEAN,
  approval_ts TIMESTAMP,
  status      TEXT
);

CREATE TABLE transactions (
  temp_token                    VARCHAR(255) PRIMARY KEY,
  temp_token_valid              BOOLEAN,
  callback_uri                  TEXT,
  certreq                       TEXT,
  certlifetime                  BIGINT,
  client_id                     TEXT,
  verifier_token                TEXT,
  access_token                  TEXT,
  refresh_token                 TEXT,
  refresh_token_valid           BOOLEAN,
  expires_in                    BIGINT,
  certificate                   TEXT,
  username                      TEXT,
  myproxyUsername               TEXT,
  access_token_valid            BOOLEAN DEFAULT NULL,
  auth_time                     TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  nonce                         TEXT,
  scopes                        TEXT,
  claims                        TEXT CHARACTER SET 'utf8',
  mp_client_session_identifier  TEXT,
  states                        TEXT,
  UNIQUE INDEX verifier (verifier_token(255)),
  UNIQUE INDEX accessToken (access_token(255)),
  UNIQUE INDEX refreshToken (refresh_token(255)),
  UNIQUE INDEX username (username(255),access_token(255))
);

CREATE TABLE ssh_keys (
{% if OS == "RH6" %}
/* 255 breaks on RH6: use there 210 & 120 instead */
  username      VARCHAR(210) NOT NULL,
  label         VARCHAR(120) NOT NULL,
{% else %}
  username      VARCHAR(255) NOT NULL,
  label         VARCHAR(255) NOT NULL,
{% endif %}
  pub_key       TEXT NOT NULL,
  description   TEXT,
  import_time   TIMESTAMP,
  PRIMARY KEY (username, label)
);

COMMIT;

/* Now grant restricted access. The tables have to exist before this step. */

GRANT ALL ON client_approvals
        TO '{{ mp_server_db_user }}'@'localhost'
        IDENTIFIED BY '{{ mp_server_db_pw }}';

GRANT ALL ON clients
        TO '{{ mp_server_db_user }}'@'localhost'
        IDENTIFIED BY '{{ mp_server_db_pw }}';

GRANT ALL ON callbacks
        TO '{{ mp_server_db_user }}'@'localhost'
        IDENTIFIED BY '{{ mp_server_db_pw }}';

GRANT ALL ON transactions
        TO '{{ mp_server_db_user }}'@'localhost'
        IDENTIFIED BY '{{ mp_server_db_pw }}';

GRANT ALL ON ssh_keys
        TO '{{ mp_server_db_user }}'@'localhost'
        IDENTIFIED BY '{{ mp_server_db_pw }}';

COMMIT;
