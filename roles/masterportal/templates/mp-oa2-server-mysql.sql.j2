/*
   NOTE: this script is based on the script shipped with
   oa4mp-server-admin-oauth2 as oauth2-mariadb.sql

   This script will create the tables for a basic mp-oa2-server install. Since MySQL has
   *no* variable support, everything is hard-coded. if you want something other
   than the default names and then edit the file.

   Also, the default timestamp must all be CURRENT_TIMESTAMP. It is not allowed
   to be NULL, but needs to be set or it will be updated on updating of the
   record. https://mariadb.com/kb/en/library/timestamp/
*/

/*
Usage: Log in as an administrator (such as root) that can create the user.
Normally this is done by the ansible script, otherwise it is (probably) also
done when granting the permissions later on.

CREATE USER '{{ mp_server_db_user }}'@'localhost' IDENTIFIED BY '{{ mp_server_db_pw }}';

Run the rest of this script.
*/

/* User and database are already created by the ansible script, hence next line
 * is normally non-functional */
CREATE DATABASE IF NOT EXISTS {{ mp_server_db }} DEFAULT CHARACTER SET utf8;

USE {{ mp_server_db }};

/*
Some useful commands:
 Show Databases;
 Show schemas;
 SELECT User FROM mysql.user;
 SHOW GRANTS FOR 'user'@'localhost';
 */

CREATE TABLE IF NOT EXISTS clients (
  client_id     VARCHAR(255) PRIMARY KEY,
  public_key    TEXT,
  name          TEXT CHARACTER SET 'utf8',
  home_url      TEXT,
  error_url     TEXT,
  email         TEXT,
  proxy_limited BOOLEAN,
  creation_ts   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  rt_lifetime   BIGINT,
  callback_uri  TEXT,
  sign_tokens   BOOLEAN,
  scopes        TEXT,
  issuer        TEXT,
  public_client BOOLEAN,
  ldap          TEXT,
  cfg           TEXT CHARACTER SET 'utf8'
);

CREATE TABLE IF NOT EXISTS adminClients (
  admin_id     VARCHAR(255) PRIMARY KEY,
  name         TEXT CHARACTER SET 'utf8',
  secret       TEXT,
  email        TEXT,
  creation_ts  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  vo           TEXT,
  issuer       TEXT
);

CREATE TABLE IF NOT EXISTS permissions (
  permission_id VARCHAR(255) PRIMARY KEY,
  admin_id      VARCHAR(255),
  client_id     VARCHAR(255),
  can_approve   BOOLEAN,
  can_create    BOOLEAN,
  can_read      BOOLEAN,
  can_remove    BOOLEAN,
  can_write     BOOLEAN,
  creation_ts   TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS client_approvals (
  client_id   VARCHAR(255) PRIMARY KEY,
  approver    TEXT,
  approved    BOOLEAN,
  approval_ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  status      TEXT
);

CREATE TABLE IF NOT EXISTS transactions (
  temp_token                    VARCHAR(255) PRIMARY KEY,
  temp_token_valid              BOOLEAN,
  callback_uri                  TEXT,
  certreq                       TEXT,
  certlifetime                  BIGINT,
  client_id                     TEXT,
  verifier_token                TEXT,
  access_token                  TEXT,
  refresh_token                 TEXT,
  refresh_token_valid           BOOLEAN,
  expires_in                    BIGINT,
  certificate                   TEXT,
  username                      TEXT CHARACTER SET 'utf8',
  myproxyUsername               TEXT CHARACTER SET 'utf8',
  claims                        TEXT CHARACTER SET 'utf8',
  mp_client_session_identifier  TEXT,
  access_token_valid            BOOLEAN,
  auth_time                     TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  nonce                         TEXT,
  scopes                        TEXT CHARACTER SET 'utf8',
  states                        TEXT CHARACTER SET 'utf8',
  UNIQUE INDEX verifier (verifier_token(255)),
  UNIQUE INDEX accessToken (access_token(255)),
  UNIQUE INDEX refreshToken (refresh_token(255)),
  UNIQUE INDEX username (username(255),access_token(255))
);

CREATE TABLE IF NOT EXISTS ssh_keys (
{% if OS == "RH6" %}
/* 255 breaks on RH6: use there 210 & 120 instead */
  username      VARCHAR(210) NOT NULL,
  label         VARCHAR(120) NOT NULL,
{% else %}
  username      VARCHAR(255) NOT NULL,
  label         VARCHAR(255) NOT NULL,
{% endif %}
  pub_key       TEXT NOT NULL,
  description   TEXT,
  import_time   TIMESTAMP,
  PRIMARY KEY (username, label)
);

COMMIT;

/* Now grant restricted access. The tables have to exist before this step. */

GRANT ALL ON client_approvals
        TO '{{ mp_server_db_user }}'@'localhost'
        IDENTIFIED BY '{{ mp_server_db_pw }}';

GRANT ALL ON clients
        TO '{{ mp_server_db_user }}'@'localhost'
        IDENTIFIED BY '{{ mp_server_db_pw }}';

GRANT ALL ON adminClients
        TO '{{ mp_server_db_user }}'@'localhost'
        IDENTIFIED BY '{{ mp_server_db_pw }}';

GRANT ALL ON transactions
        TO '{{ mp_server_db_user }}'@'localhost'
        IDENTIFIED BY '{{ mp_server_db_pw }}';

GRANT ALL ON permissions
        TO '{{ mp_server_db_user }}'@'localhost'
        IDENTIFIED BY '{{ mp_server_db_pw }}';

GRANT ALL ON ssh_keys
        TO '{{ mp_server_db_user }}'@'localhost'
        IDENTIFIED BY '{{ mp_server_db_pw }}';

COMMIT;
